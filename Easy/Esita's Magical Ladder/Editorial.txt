Intuition
The problem of finding the number of ways Esita can climb a ladder with the option to take 1, 2, or 3 steps at a time is reminiscent of the classic Fibonacci sequence, but with a twist. Instead of each number being the sum of the two preceding numbers, here, each position is the sum of the three preceding positions. This problem can be approached with dynamic programming due to its overlapping subproblems and optimal substructure properties.

Approach
The key to solving this problem lies in breaking it down into smaller, manageable subproblems. We can observe that the number of ways to reach the nth rung is the sum of the ways to reach the (n-1)th, (n-2)th, and (n-3)th rungs. This is because, from the n-1th rung, Esita can take a single step to reach the nth rung, from the n-2th rung she can take two steps, and from the n-3th rung, she can take three steps to reach the nth rung.
To implement this, we use an array to store the number of ways to reach each rung up to n. However, to optimize space, we can observe that at any point, we only need the values of the last three rungs to calculate the next value. Therefore, we can use a rolling array of size 3 to keep track of these values, significantly reducing our space complexity.

Code
def countWaysToClimb(n):
    ways = [0] * 3
    ways[0], ways[1], ways[2] = 1, 1, 2  # Base cases

    for i in range(3, n + 1):
        ways[i % 3] = ways[(i - 1) % 3] + ways[(i - 2) % 3] + ways[(i - 3) % 3]

    return ways[n % 3]

n = int(input())
print(countWaysToClimb(n))

Proper Explanation
Base Cases: We initialize the ways array with base cases. There is 1 way to climb 0 or 1 rung (simply stand or take one step), and there are 2 ways to climb 2 rungs (1 step + 1 step or a single 2-step jump).
Dynamic Programming Loop: From the 3rd rung onwards, we calculate the number of ways to reach that rung by summing up the ways to reach the three previous rungs. This is done in a loop that iterates from 3 to n.
Space Optimization: Instead of maintaining an array of size n+1, we use a modulo operation to rotate within an array of size 3. This way, ways[i % 3] gives us the current rung's number of ways, and (i - 1) % 3, (i - 2) % 3, and (i - 3) % 3 give us the indices for the three previous rungs.
Result: After the loop completes, ways[n % 3] contains the number of ways to reach the nth rung, which is our desired output.

This solution efficiently calculates the number of ways to climb the ladder, leveraging the principles of dynamic programming and space optimization for a scalable and optimized approach.