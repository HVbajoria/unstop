Tags: Arrays, Sorting, Greedy Algorithms

Topics: Sorting Algorithms, Greedy Techniques, Array Manipulation, Hashing

Suggested Companies: Amazon, Google, Microsoft, Adobe, Flipkart

Difficulty Level: Medium

Problem Statement:
Gopal has a collection of boxes, each with a unique weight. They're all mixed up, and he wants them arranged from lightest to heaviest. 
Help Gopal determine the minimum number of exchanges required to organize his boxes in order.

Input Format:
The first line contains a single integer N, the number of boxes.
The second line contains N space-separated integers, representing the weights of the boxes.

Output Format:
A single integer representing the minimum number of exchanges required to arrange the boxes from lightest to heaviest.

Constraints:
1 <= N <= 10^5
The weight of each box is a unique integer in the range (1 <= weight <= 10^9).

Sample Testcase 1:
Input
4
3 1 2 4

Output:
2

Explanation
There are 4 boxes with weights 3, 1, 2, and 4 respectively.
To arrange them from lightest to heaviest, we can follow these steps:
    Exchange the box with weight 3 with the box with weight 1. Now, the order is 1, 3, 2, 4.
    Next, exchange the box with weight 3 with the box with weight 2. Now, the order is 1, 2, 3, 4.
Therefore, Gopal needs to make a minimum of 2 exchanges.


Sample Testcase 2:
Input:
5
5 4 3 2 1
Output:
2
Explanation:
There are 5 boxes with weights 5, 4, 3, 2, and 1 respectively.
To arrange them from lightest to heaviest, we can follow these steps:
    Exchange the box with weight 5 with the box with weight 1. Now, the order is 1, 4, 3, 2, 5.
    Next, exchange the box with weight 4 with the box with weight 2. Now, the order is 1, 2, 3, 4, 5.
Therefore, Gopal needs to make a minimum of 2 exchanges.

Solution Code:
# Python3 program to find the minimum number of exchanges
# required to arrange the boxes in order of their weight

def minimumExchanges(weights, num_boxes):
    exchanges = 0
    sorted_weights = sorted(weights)  # Sorted list of weights for reference
    weight_to_index = {weight: index for index, weight in enumerate(weights)}  # Mapping weights to their indices

    for i in range(num_boxes):
        # If the current weight is not in the correct position
        if weights[i] != sorted_weights[i]:
            exchanges += 1  # Increment the exchange count
            current_weight = weights[i]

            # Swap the current weight with the weight that should be here
            swap_index = weight_to_index[sorted_weights[i]]
            weights[i], weights[swap_index] = weights[swap_index], weights[i]

            # Update the indices in the mapping
            weight_to_index[current_weight] = swap_index
            weight_to_index[sorted_weights[i]] = i

    return exchanges

# Taking input
num_boxes = int(input().strip())
weights = list(map(int, input().strip().split()))

# Output the minimum number of exchanges required
print(minimumExchanges(weights, num_boxes))