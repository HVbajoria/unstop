Tags: Strings, Dynamic Programming, Recursion

Topics: String Manipulation, Longest Common Subsequence, Dynamic Programming

Suggested Companies: Google, Amazon, Facebook, Microsoft

Difficulty Level: Medium

Problem Statement:
Virat has two lists of napkins, each with letters scribbled on them in a particular order.
He's curious to find out the longest continuos sequence of matching letters between the two lists.

Input Format:
The first line contains an integer N, the number of letters on the first list of napkins.
The second line contains a string of N uppercase letters, representing the letters on the first list of napkins.
The third line contains an integer M, the number of letters on the second list of napkins.
The fourth line contains a string of M uppercase letters, representing the letters on the second list of napkins.

Output Format:
A single line containing the length of the longest continuos sequence of matching letters between the two lists.

Constraints:
1 <= N, M <= 10^7
All letters are uppercase English letters.

Sample Testcase 1:
Input:
5
ABCED
7
ACBECED
Output:
3
Explanation:
The first list of napkins has 5 letters: "ABCED".
The second list has 7 letters: "ACBECED".
To find the longest continuous sequence of matching letters between these two lists, we compare the sequences in both lists. The longest matching sequence in this case is "CED", which appears at the end of the first list and also within the second list.

Sample Testcase 2:
Input:
5
ZXCVB
5
ASDFG
Output:
0

Explanation of Sample Input 2:
Here, Virat's first list of napkins has the letters "ZXCVB", and the second list has "ASDFG". 
Since there are no matching letters in sequence between the two lists, the longest continuous sequence of matching letters is 0.

Solution Code:
# Python3 program to find the length of the longest continuous sequence of matching letters

# Function to find the length of the longest continuous sequence of matching letters
def longest_matching_sequence(len_list1, len_list2, count):
    if (len_list1 == 0 or len_list2 == 0):
        return count

    if (list1[len_list1 - 1] == list2[len_list2 - 1]):
        count = longest_matching_sequence(len_list1 - 1, len_list2 - 1, count + 1)

    count = max(count, max(longest_matching_sequence(len_list1, len_list2 - 1, 0),
                           longest_matching_sequence(len_list1 - 1, len_list2, 0)))
    return count

# Taking user input
if __name__ == "__main__":
    N = int(input().strip())
    list1 = input().strip()
    M = int(input().strip())
    list2 = input().strip()

    print(longest_matching_sequence(N, M, 0))